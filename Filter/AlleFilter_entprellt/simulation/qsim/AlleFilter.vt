// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/17/2018 14:28:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    AlleFilter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module AlleFilter_vlg_sample_tst(
	ADC_in,
	clk,
	reset,
	SW0,
	SW1,
	SW2,
	SW3,
	sampler_tx
);
input [13:0] ADC_in;
input  clk;
input  reset;
input  SW0;
input  SW1;
input  SW2;
input  SW3;
output sampler_tx;

reg sample;
time current_time;
always @(ADC_in or clk or reset or SW0 or SW1 or SW2 or SW3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module AlleFilter_vlg_check_tst (
	OUT,
	U32,
	U33,
	sampler_rx
);
input [13:0] OUT;
input [7:0] U32;
input [7:0] U33;
input sampler_rx;

reg [13:0] OUT_expected;
reg [7:0] U32_expected;
reg [7:0] U33_expected;

reg [13:0] OUT_prev;
reg [7:0] U32_prev;
reg [7:0] U33_prev;

reg [13:0] OUT_expected_prev;
reg [7:0] U32_expected_prev;
reg [7:0] U33_expected_prev;

reg [13:0] last_OUT_exp;
reg [7:0] last_U32_exp;
reg [7:0] last_U33_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	OUT_prev = OUT;
	U32_prev = U32;
	U33_prev = U33;
end

// update expected /o prevs

always @(trigger)
begin
	OUT_expected_prev = OUT_expected;
	U32_expected_prev = U32_expected;
	U33_expected_prev = U33_expected;
end


// expected OUT[ 13 ]
initial
begin
	OUT_expected[13] = 1'bX;
end 
// expected OUT[ 12 ]
initial
begin
	OUT_expected[12] = 1'bX;
end 
// expected OUT[ 11 ]
initial
begin
	OUT_expected[11] = 1'bX;
end 
// expected OUT[ 10 ]
initial
begin
	OUT_expected[10] = 1'bX;
end 
// expected OUT[ 9 ]
initial
begin
	OUT_expected[9] = 1'bX;
end 
// expected OUT[ 8 ]
initial
begin
	OUT_expected[8] = 1'bX;
end 
// expected OUT[ 7 ]
initial
begin
	OUT_expected[7] = 1'bX;
end 
// expected OUT[ 6 ]
initial
begin
	OUT_expected[6] = 1'bX;
end 
// expected OUT[ 5 ]
initial
begin
	OUT_expected[5] = 1'bX;
end 
// expected OUT[ 4 ]
initial
begin
	OUT_expected[4] = 1'bX;
end 
// expected OUT[ 3 ]
initial
begin
	OUT_expected[3] = 1'bX;
end 
// expected OUT[ 2 ]
initial
begin
	OUT_expected[2] = 1'bX;
end 
// expected OUT[ 1 ]
initial
begin
	OUT_expected[1] = 1'bX;
end 
// expected OUT[ 0 ]
initial
begin
	OUT_expected[0] = 1'bX;
end 
// expected U33[ 7 ]
initial
begin
	U33_expected[7] = 1'bX;
end 
// expected U33[ 6 ]
initial
begin
	U33_expected[6] = 1'bX;
end 
// expected U33[ 5 ]
initial
begin
	U33_expected[5] = 1'bX;
end 
// expected U33[ 4 ]
initial
begin
	U33_expected[4] = 1'bX;
end 
// expected U33[ 3 ]
initial
begin
	U33_expected[3] = 1'bX;
end 
// expected U33[ 2 ]
initial
begin
	U33_expected[2] = 1'bX;
end 
// expected U33[ 1 ]
initial
begin
	U33_expected[1] = 1'bX;
end 
// expected U33[ 0 ]
initial
begin
	U33_expected[0] = 1'bX;
end 
// expected U32[ 7 ]
initial
begin
	U32_expected[7] = 1'bX;
end 
// expected U32[ 6 ]
initial
begin
	U32_expected[6] = 1'bX;
end 
// expected U32[ 5 ]
initial
begin
	U32_expected[5] = 1'bX;
end 
// expected U32[ 4 ]
initial
begin
	U32_expected[4] = 1'bX;
end 
// expected U32[ 3 ]
initial
begin
	U32_expected[3] = 1'bX;
end 
// expected U32[ 2 ]
initial
begin
	U32_expected[2] = 1'bX;
end 
// expected U32[ 1 ]
initial
begin
	U32_expected[1] = 1'bX;
end 
// expected U32[ 0 ]
initial
begin
	U32_expected[0] = 1'bX;
end 
// generate trigger
always @(OUT_expected or OUT or U32_expected or U32 or U33_expected or U33)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected OUT = %b | expected U32 = %b | expected U33 = %b | ",OUT_expected_prev,U32_expected_prev,U33_expected_prev);
	$display("| real OUT = %b | real U32 = %b | real U33 = %b | ",OUT_prev,U32_prev,U33_prev);
`endif
	if (
		( OUT_expected_prev[0] !== 1'bx ) && ( OUT_prev[0] !== OUT_expected_prev[0] )
		&& ((OUT_expected_prev[0] !== last_OUT_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[0] = OUT_expected_prev[0];
	end
	if (
		( OUT_expected_prev[1] !== 1'bx ) && ( OUT_prev[1] !== OUT_expected_prev[1] )
		&& ((OUT_expected_prev[1] !== last_OUT_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[1] = OUT_expected_prev[1];
	end
	if (
		( OUT_expected_prev[2] !== 1'bx ) && ( OUT_prev[2] !== OUT_expected_prev[2] )
		&& ((OUT_expected_prev[2] !== last_OUT_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[2] = OUT_expected_prev[2];
	end
	if (
		( OUT_expected_prev[3] !== 1'bx ) && ( OUT_prev[3] !== OUT_expected_prev[3] )
		&& ((OUT_expected_prev[3] !== last_OUT_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[3] = OUT_expected_prev[3];
	end
	if (
		( OUT_expected_prev[4] !== 1'bx ) && ( OUT_prev[4] !== OUT_expected_prev[4] )
		&& ((OUT_expected_prev[4] !== last_OUT_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[4] = OUT_expected_prev[4];
	end
	if (
		( OUT_expected_prev[5] !== 1'bx ) && ( OUT_prev[5] !== OUT_expected_prev[5] )
		&& ((OUT_expected_prev[5] !== last_OUT_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[5] = OUT_expected_prev[5];
	end
	if (
		( OUT_expected_prev[6] !== 1'bx ) && ( OUT_prev[6] !== OUT_expected_prev[6] )
		&& ((OUT_expected_prev[6] !== last_OUT_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[6] = OUT_expected_prev[6];
	end
	if (
		( OUT_expected_prev[7] !== 1'bx ) && ( OUT_prev[7] !== OUT_expected_prev[7] )
		&& ((OUT_expected_prev[7] !== last_OUT_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[7] = OUT_expected_prev[7];
	end
	if (
		( OUT_expected_prev[8] !== 1'bx ) && ( OUT_prev[8] !== OUT_expected_prev[8] )
		&& ((OUT_expected_prev[8] !== last_OUT_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[8] = OUT_expected_prev[8];
	end
	if (
		( OUT_expected_prev[9] !== 1'bx ) && ( OUT_prev[9] !== OUT_expected_prev[9] )
		&& ((OUT_expected_prev[9] !== last_OUT_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[9] = OUT_expected_prev[9];
	end
	if (
		( OUT_expected_prev[10] !== 1'bx ) && ( OUT_prev[10] !== OUT_expected_prev[10] )
		&& ((OUT_expected_prev[10] !== last_OUT_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[10] = OUT_expected_prev[10];
	end
	if (
		( OUT_expected_prev[11] !== 1'bx ) && ( OUT_prev[11] !== OUT_expected_prev[11] )
		&& ((OUT_expected_prev[11] !== last_OUT_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[11] = OUT_expected_prev[11];
	end
	if (
		( OUT_expected_prev[12] !== 1'bx ) && ( OUT_prev[12] !== OUT_expected_prev[12] )
		&& ((OUT_expected_prev[12] !== last_OUT_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[12] = OUT_expected_prev[12];
	end
	if (
		( OUT_expected_prev[13] !== 1'bx ) && ( OUT_prev[13] !== OUT_expected_prev[13] )
		&& ((OUT_expected_prev[13] !== last_OUT_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[13] = OUT_expected_prev[13];
	end
	if (
		( U32_expected_prev[0] !== 1'bx ) && ( U32_prev[0] !== U32_expected_prev[0] )
		&& ((U32_expected_prev[0] !== last_U32_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port U32[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", U32_expected_prev);
		$display ("     Real value = %b", U32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_U32_exp[0] = U32_expected_prev[0];
	end
	if (
		( U32_expected_prev[1] !== 1'bx ) && ( U32_prev[1] !== U32_expected_prev[1] )
		&& ((U32_expected_prev[1] !== last_U32_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port U32[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", U32_expected_prev);
		$display ("     Real value = %b", U32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_U32_exp[1] = U32_expected_prev[1];
	end
	if (
		( U32_expected_prev[2] !== 1'bx ) && ( U32_prev[2] !== U32_expected_prev[2] )
		&& ((U32_expected_prev[2] !== last_U32_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port U32[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", U32_expected_prev);
		$display ("     Real value = %b", U32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_U32_exp[2] = U32_expected_prev[2];
	end
	if (
		( U32_expected_prev[3] !== 1'bx ) && ( U32_prev[3] !== U32_expected_prev[3] )
		&& ((U32_expected_prev[3] !== last_U32_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port U32[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", U32_expected_prev);
		$display ("     Real value = %b", U32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_U32_exp[3] = U32_expected_prev[3];
	end
	if (
		( U32_expected_prev[4] !== 1'bx ) && ( U32_prev[4] !== U32_expected_prev[4] )
		&& ((U32_expected_prev[4] !== last_U32_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port U32[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", U32_expected_prev);
		$display ("     Real value = %b", U32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_U32_exp[4] = U32_expected_prev[4];
	end
	if (
		( U32_expected_prev[5] !== 1'bx ) && ( U32_prev[5] !== U32_expected_prev[5] )
		&& ((U32_expected_prev[5] !== last_U32_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port U32[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", U32_expected_prev);
		$display ("     Real value = %b", U32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_U32_exp[5] = U32_expected_prev[5];
	end
	if (
		( U32_expected_prev[6] !== 1'bx ) && ( U32_prev[6] !== U32_expected_prev[6] )
		&& ((U32_expected_prev[6] !== last_U32_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port U32[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", U32_expected_prev);
		$display ("     Real value = %b", U32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_U32_exp[6] = U32_expected_prev[6];
	end
	if (
		( U32_expected_prev[7] !== 1'bx ) && ( U32_prev[7] !== U32_expected_prev[7] )
		&& ((U32_expected_prev[7] !== last_U32_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port U32[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", U32_expected_prev);
		$display ("     Real value = %b", U32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_U32_exp[7] = U32_expected_prev[7];
	end
	if (
		( U33_expected_prev[0] !== 1'bx ) && ( U33_prev[0] !== U33_expected_prev[0] )
		&& ((U33_expected_prev[0] !== last_U33_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port U33[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", U33_expected_prev);
		$display ("     Real value = %b", U33_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_U33_exp[0] = U33_expected_prev[0];
	end
	if (
		( U33_expected_prev[1] !== 1'bx ) && ( U33_prev[1] !== U33_expected_prev[1] )
		&& ((U33_expected_prev[1] !== last_U33_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port U33[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", U33_expected_prev);
		$display ("     Real value = %b", U33_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_U33_exp[1] = U33_expected_prev[1];
	end
	if (
		( U33_expected_prev[2] !== 1'bx ) && ( U33_prev[2] !== U33_expected_prev[2] )
		&& ((U33_expected_prev[2] !== last_U33_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port U33[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", U33_expected_prev);
		$display ("     Real value = %b", U33_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_U33_exp[2] = U33_expected_prev[2];
	end
	if (
		( U33_expected_prev[3] !== 1'bx ) && ( U33_prev[3] !== U33_expected_prev[3] )
		&& ((U33_expected_prev[3] !== last_U33_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port U33[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", U33_expected_prev);
		$display ("     Real value = %b", U33_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_U33_exp[3] = U33_expected_prev[3];
	end
	if (
		( U33_expected_prev[4] !== 1'bx ) && ( U33_prev[4] !== U33_expected_prev[4] )
		&& ((U33_expected_prev[4] !== last_U33_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port U33[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", U33_expected_prev);
		$display ("     Real value = %b", U33_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_U33_exp[4] = U33_expected_prev[4];
	end
	if (
		( U33_expected_prev[5] !== 1'bx ) && ( U33_prev[5] !== U33_expected_prev[5] )
		&& ((U33_expected_prev[5] !== last_U33_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port U33[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", U33_expected_prev);
		$display ("     Real value = %b", U33_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_U33_exp[5] = U33_expected_prev[5];
	end
	if (
		( U33_expected_prev[6] !== 1'bx ) && ( U33_prev[6] !== U33_expected_prev[6] )
		&& ((U33_expected_prev[6] !== last_U33_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port U33[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", U33_expected_prev);
		$display ("     Real value = %b", U33_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_U33_exp[6] = U33_expected_prev[6];
	end
	if (
		( U33_expected_prev[7] !== 1'bx ) && ( U33_prev[7] !== U33_expected_prev[7] )
		&& ((U33_expected_prev[7] !== last_U33_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port U33[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", U33_expected_prev);
		$display ("     Real value = %b", U33_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_U33_exp[7] = U33_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module AlleFilter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [13:0] ADC_in;
reg clk;
reg reset;
reg SW0;
reg SW1;
reg SW2;
reg SW3;
// wires                                               
wire [13:0] OUT;
wire [7:0] U32;
wire [7:0] U33;

wire sampler;                             

// assign statements (if any)                          
AlleFilter i1 (
// port map - connection between master ports and signals/registers   
	.ADC_in(ADC_in),
	.clk(clk),
	.OUT(OUT),
	.reset(reset),
	.SW0(SW0),
	.SW1(SW1),
	.SW2(SW2),
	.SW3(SW3),
	.U32(U32),
	.U33(U33)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #10000 1'b1;
end 
// ADC_in[ 13 ]
initial
begin
	ADC_in[13] = 1'b0;
end 
// ADC_in[ 12 ]
initial
begin
	ADC_in[12] = 1'b0;
end 
// ADC_in[ 11 ]
initial
begin
	ADC_in[11] = 1'b0;
end 
// ADC_in[ 10 ]
initial
begin
	ADC_in[10] = 1'b0;
end 
// ADC_in[ 9 ]
initial
begin
	ADC_in[9] = 1'b0;
end 
// ADC_in[ 8 ]
initial
begin
	ADC_in[8] = 1'b0;
end 
// ADC_in[ 7 ]
initial
begin
	ADC_in[7] = 1'b0;
end 
// ADC_in[ 6 ]
initial
begin
	ADC_in[6] = 1'b0;
end 
// ADC_in[ 5 ]
initial
begin
	ADC_in[5] = 1'b0;
end 
// ADC_in[ 4 ]
initial
begin
	ADC_in[4] = 1'b0;
end 
// ADC_in[ 3 ]
initial
begin
	ADC_in[3] = 1'b0;
end 
// ADC_in[ 2 ]
initial
begin
	ADC_in[2] = 1'b0;
end 
// ADC_in[ 1 ]
initial
begin
	ADC_in[1] = 1'b0;
end 
// ADC_in[ 0 ]
initial
begin
	ADC_in[0] = 1'b0;
	ADC_in[0] = #20000 1'b1;
end 

// SW0
initial
begin
	SW0 = 1'b1;
end 

// SW1
initial
begin
	SW1 = 1'b1;
end 

// SW2
initial
begin
	SW2 = 1'b1;
end 

// SW3
initial
begin
	SW3 = 1'b1;
end 

AlleFilter_vlg_sample_tst tb_sample (
	.ADC_in(ADC_in),
	.clk(clk),
	.reset(reset),
	.SW0(SW0),
	.SW1(SW1),
	.SW2(SW2),
	.SW3(SW3),
	.sampler_tx(sampler)
);

AlleFilter_vlg_check_tst tb_out(
	.OUT(OUT),
	.U32(U32),
	.U33(U33),
	.sampler_rx(sampler)
);
endmodule

