// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/17/2018 16:12:51"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    muxcontrol
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module muxcontrol_vlg_sample_tst(
	clk,
	reset,
	sw0,
	sw1,
	sw2,
	sw3,
	sampler_tx
);
input  clk;
input  reset;
input  sw0;
input  sw1;
input  sw2;
input  sw3;
output sampler_tx;

reg sample;
time current_time;
always @(clk or reset or sw0 or sw1 or sw2 or sw3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module muxcontrol_vlg_check_tst (
	muxchannel,
	u32,
	u33,
	sampler_rx
);
input [1:0] muxchannel;
input [7:0] u32;
input [7:0] u33;
input sampler_rx;

reg [1:0] muxchannel_expected;
reg [7:0] u32_expected;
reg [7:0] u33_expected;

reg [1:0] muxchannel_prev;
reg [7:0] u32_prev;
reg [7:0] u33_prev;

reg [1:0] muxchannel_expected_prev;
reg [7:0] u32_expected_prev;
reg [7:0] u33_expected_prev;

reg [1:0] last_muxchannel_exp;
reg [7:0] last_u32_exp;
reg [7:0] last_u33_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	muxchannel_prev = muxchannel;
	u32_prev = u32;
	u33_prev = u33;
end

// update expected /o prevs

always @(trigger)
begin
	muxchannel_expected_prev = muxchannel_expected;
	u32_expected_prev = u32_expected;
	u33_expected_prev = u33_expected;
end


// expected muxchannel[ 1 ]
initial
begin
	muxchannel_expected[1] = 1'bX;
end 
// expected muxchannel[ 0 ]
initial
begin
	muxchannel_expected[0] = 1'bX;
end 
// expected u32[ 7 ]
initial
begin
	u32_expected[7] = 1'bX;
end 
// expected u32[ 6 ]
initial
begin
	u32_expected[6] = 1'bX;
end 
// expected u32[ 5 ]
initial
begin
	u32_expected[5] = 1'bX;
end 
// expected u32[ 4 ]
initial
begin
	u32_expected[4] = 1'bX;
end 
// expected u32[ 3 ]
initial
begin
	u32_expected[3] = 1'bX;
end 
// expected u32[ 2 ]
initial
begin
	u32_expected[2] = 1'bX;
end 
// expected u32[ 1 ]
initial
begin
	u32_expected[1] = 1'bX;
end 
// expected u32[ 0 ]
initial
begin
	u32_expected[0] = 1'bX;
end 
// expected u33[ 7 ]
initial
begin
	u33_expected[7] = 1'bX;
end 
// expected u33[ 6 ]
initial
begin
	u33_expected[6] = 1'bX;
end 
// expected u33[ 5 ]
initial
begin
	u33_expected[5] = 1'bX;
end 
// expected u33[ 4 ]
initial
begin
	u33_expected[4] = 1'bX;
end 
// expected u33[ 3 ]
initial
begin
	u33_expected[3] = 1'bX;
end 
// expected u33[ 2 ]
initial
begin
	u33_expected[2] = 1'bX;
end 
// expected u33[ 1 ]
initial
begin
	u33_expected[1] = 1'bX;
end 
// expected u33[ 0 ]
initial
begin
	u33_expected[0] = 1'bX;
end 
// generate trigger
always @(muxchannel_expected or muxchannel or u32_expected or u32 or u33_expected or u33)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected muxchannel = %b | expected u32 = %b | expected u33 = %b | ",muxchannel_expected_prev,u32_expected_prev,u33_expected_prev);
	$display("| real muxchannel = %b | real u32 = %b | real u33 = %b | ",muxchannel_prev,u32_prev,u33_prev);
`endif
	if (
		( muxchannel_expected_prev[0] !== 1'bx ) && ( muxchannel_prev[0] !== muxchannel_expected_prev[0] )
		&& ((muxchannel_expected_prev[0] !== last_muxchannel_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port muxchannel[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", muxchannel_expected_prev);
		$display ("     Real value = %b", muxchannel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_muxchannel_exp[0] = muxchannel_expected_prev[0];
	end
	if (
		( muxchannel_expected_prev[1] !== 1'bx ) && ( muxchannel_prev[1] !== muxchannel_expected_prev[1] )
		&& ((muxchannel_expected_prev[1] !== last_muxchannel_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port muxchannel[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", muxchannel_expected_prev);
		$display ("     Real value = %b", muxchannel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_muxchannel_exp[1] = muxchannel_expected_prev[1];
	end
	if (
		( u32_expected_prev[0] !== 1'bx ) && ( u32_prev[0] !== u32_expected_prev[0] )
		&& ((u32_expected_prev[0] !== last_u32_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port u32[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", u32_expected_prev);
		$display ("     Real value = %b", u32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_u32_exp[0] = u32_expected_prev[0];
	end
	if (
		( u32_expected_prev[1] !== 1'bx ) && ( u32_prev[1] !== u32_expected_prev[1] )
		&& ((u32_expected_prev[1] !== last_u32_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port u32[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", u32_expected_prev);
		$display ("     Real value = %b", u32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_u32_exp[1] = u32_expected_prev[1];
	end
	if (
		( u32_expected_prev[2] !== 1'bx ) && ( u32_prev[2] !== u32_expected_prev[2] )
		&& ((u32_expected_prev[2] !== last_u32_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port u32[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", u32_expected_prev);
		$display ("     Real value = %b", u32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_u32_exp[2] = u32_expected_prev[2];
	end
	if (
		( u32_expected_prev[3] !== 1'bx ) && ( u32_prev[3] !== u32_expected_prev[3] )
		&& ((u32_expected_prev[3] !== last_u32_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port u32[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", u32_expected_prev);
		$display ("     Real value = %b", u32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_u32_exp[3] = u32_expected_prev[3];
	end
	if (
		( u32_expected_prev[4] !== 1'bx ) && ( u32_prev[4] !== u32_expected_prev[4] )
		&& ((u32_expected_prev[4] !== last_u32_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port u32[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", u32_expected_prev);
		$display ("     Real value = %b", u32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_u32_exp[4] = u32_expected_prev[4];
	end
	if (
		( u32_expected_prev[5] !== 1'bx ) && ( u32_prev[5] !== u32_expected_prev[5] )
		&& ((u32_expected_prev[5] !== last_u32_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port u32[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", u32_expected_prev);
		$display ("     Real value = %b", u32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_u32_exp[5] = u32_expected_prev[5];
	end
	if (
		( u32_expected_prev[6] !== 1'bx ) && ( u32_prev[6] !== u32_expected_prev[6] )
		&& ((u32_expected_prev[6] !== last_u32_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port u32[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", u32_expected_prev);
		$display ("     Real value = %b", u32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_u32_exp[6] = u32_expected_prev[6];
	end
	if (
		( u32_expected_prev[7] !== 1'bx ) && ( u32_prev[7] !== u32_expected_prev[7] )
		&& ((u32_expected_prev[7] !== last_u32_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port u32[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", u32_expected_prev);
		$display ("     Real value = %b", u32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_u32_exp[7] = u32_expected_prev[7];
	end
	if (
		( u33_expected_prev[0] !== 1'bx ) && ( u33_prev[0] !== u33_expected_prev[0] )
		&& ((u33_expected_prev[0] !== last_u33_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port u33[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", u33_expected_prev);
		$display ("     Real value = %b", u33_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_u33_exp[0] = u33_expected_prev[0];
	end
	if (
		( u33_expected_prev[1] !== 1'bx ) && ( u33_prev[1] !== u33_expected_prev[1] )
		&& ((u33_expected_prev[1] !== last_u33_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port u33[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", u33_expected_prev);
		$display ("     Real value = %b", u33_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_u33_exp[1] = u33_expected_prev[1];
	end
	if (
		( u33_expected_prev[2] !== 1'bx ) && ( u33_prev[2] !== u33_expected_prev[2] )
		&& ((u33_expected_prev[2] !== last_u33_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port u33[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", u33_expected_prev);
		$display ("     Real value = %b", u33_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_u33_exp[2] = u33_expected_prev[2];
	end
	if (
		( u33_expected_prev[3] !== 1'bx ) && ( u33_prev[3] !== u33_expected_prev[3] )
		&& ((u33_expected_prev[3] !== last_u33_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port u33[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", u33_expected_prev);
		$display ("     Real value = %b", u33_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_u33_exp[3] = u33_expected_prev[3];
	end
	if (
		( u33_expected_prev[4] !== 1'bx ) && ( u33_prev[4] !== u33_expected_prev[4] )
		&& ((u33_expected_prev[4] !== last_u33_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port u33[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", u33_expected_prev);
		$display ("     Real value = %b", u33_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_u33_exp[4] = u33_expected_prev[4];
	end
	if (
		( u33_expected_prev[5] !== 1'bx ) && ( u33_prev[5] !== u33_expected_prev[5] )
		&& ((u33_expected_prev[5] !== last_u33_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port u33[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", u33_expected_prev);
		$display ("     Real value = %b", u33_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_u33_exp[5] = u33_expected_prev[5];
	end
	if (
		( u33_expected_prev[6] !== 1'bx ) && ( u33_prev[6] !== u33_expected_prev[6] )
		&& ((u33_expected_prev[6] !== last_u33_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port u33[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", u33_expected_prev);
		$display ("     Real value = %b", u33_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_u33_exp[6] = u33_expected_prev[6];
	end
	if (
		( u33_expected_prev[7] !== 1'bx ) && ( u33_prev[7] !== u33_expected_prev[7] )
		&& ((u33_expected_prev[7] !== last_u33_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port u33[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", u33_expected_prev);
		$display ("     Real value = %b", u33_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_u33_exp[7] = u33_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module muxcontrol_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
reg sw0;
reg sw1;
reg sw2;
reg sw3;
// wires                                               
wire [1:0] muxchannel;
wire [7:0] u32;
wire [7:0] u33;

wire sampler;                             

// assign statements (if any)                          
muxcontrol i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.muxchannel(muxchannel),
	.reset(reset),
	.sw0(sw0),
	.sw1(sw1),
	.sw2(sw2),
	.sw3(sw3),
	.u32(u32),
	.u33(u33)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #10000 1'b1;
end 

// sw0
initial
begin
	sw0 = 1'b1;
	sw0 = #30000 1'b0;
	sw0 = #10000 1'b1;
end 

// sw1
initial
begin
	sw1 = 1'b1;
	sw1 = #70000 1'b0;
	sw1 = #10000 1'b1;
end 

// sw2
initial
begin
	sw2 = 1'b1;
	sw2 = #110000 1'b0;
	sw2 = #10000 1'b1;
end 

// sw3
initial
begin
	sw3 = 1'b1;
	sw3 = #150000 1'b0;
	sw3 = #10000 1'b1;
end 

muxcontrol_vlg_sample_tst tb_sample (
	.clk(clk),
	.reset(reset),
	.sw0(sw0),
	.sw1(sw1),
	.sw2(sw2),
	.sw3(sw3),
	.sampler_tx(sampler)
);

muxcontrol_vlg_check_tst tb_out(
	.muxchannel(muxchannel),
	.u32(u32),
	.u33(u33),
	.sampler_rx(sampler)
);
endmodule

