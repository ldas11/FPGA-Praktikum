// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/29/2017 18:04:55"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    LauflichtV2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module LauflichtV2_vlg_sample_tst(
	change_mode,
	clk,
	muster,
	muster_ubernahme,
	reset,
	start,
	sampler_tx
);
input  change_mode;
input  clk;
input [7:0] muster;
input  muster_ubernahme;
input  reset;
input  start;
output sampler_tx;

reg sample;
time current_time;
always @(change_mode or clk or muster or muster_ubernahme or reset or start)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module LauflichtV2_vlg_check_tst (
	LEDs,
	U32,
	U33,
	sampler_rx
);
input [7:0] LEDs;
input [7:0] U32;
input [7:0] U33;
input sampler_rx;

reg [7:0] LEDs_expected;
reg [7:0] U32_expected;
reg [7:0] U33_expected;

reg [7:0] LEDs_prev;
reg [7:0] U32_prev;
reg [7:0] U33_prev;

reg [7:0] LEDs_expected_prev;

reg [7:0] last_LEDs_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	LEDs_prev = LEDs;
	U32_prev = U32;
	U33_prev = U33;
end

// update expected /o prevs

always @(trigger)
begin
	LEDs_expected_prev = LEDs_expected;
end


// expected LEDs[ 7 ]
initial
begin
	LEDs_expected[7] = 1'bX;
end 
// expected LEDs[ 6 ]
initial
begin
	LEDs_expected[6] = 1'bX;
end 
// expected LEDs[ 5 ]
initial
begin
	LEDs_expected[5] = 1'bX;
end 
// expected LEDs[ 4 ]
initial
begin
	LEDs_expected[4] = 1'bX;
end 
// expected LEDs[ 3 ]
initial
begin
	LEDs_expected[3] = 1'bX;
end 
// expected LEDs[ 2 ]
initial
begin
	LEDs_expected[2] = 1'bX;
end 
// expected LEDs[ 1 ]
initial
begin
	LEDs_expected[1] = 1'bX;
end 
// expected LEDs[ 0 ]
initial
begin
	LEDs_expected[0] = 1'bX;
end 
// generate trigger
always @(LEDs_expected or LEDs or U32_expected or U32 or U33_expected or U33)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected LEDs = %b | expected U32 = %b | expected U33 = %b | ",LEDs_expected_prev,U32_expected_prev,U33_expected_prev);
	$display("| real LEDs = %b | real U32 = %b | real U33 = %b | ",LEDs_prev,U32_prev,U33_prev);
`endif
	if (
		( LEDs_expected_prev[0] !== 1'bx ) && ( LEDs_prev[0] !== LEDs_expected_prev[0] )
		&& ((LEDs_expected_prev[0] !== last_LEDs_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDs[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDs_expected_prev);
		$display ("     Real value = %b", LEDs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LEDs_exp[0] = LEDs_expected_prev[0];
	end
	if (
		( LEDs_expected_prev[1] !== 1'bx ) && ( LEDs_prev[1] !== LEDs_expected_prev[1] )
		&& ((LEDs_expected_prev[1] !== last_LEDs_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDs[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDs_expected_prev);
		$display ("     Real value = %b", LEDs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LEDs_exp[1] = LEDs_expected_prev[1];
	end
	if (
		( LEDs_expected_prev[2] !== 1'bx ) && ( LEDs_prev[2] !== LEDs_expected_prev[2] )
		&& ((LEDs_expected_prev[2] !== last_LEDs_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDs[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDs_expected_prev);
		$display ("     Real value = %b", LEDs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LEDs_exp[2] = LEDs_expected_prev[2];
	end
	if (
		( LEDs_expected_prev[3] !== 1'bx ) && ( LEDs_prev[3] !== LEDs_expected_prev[3] )
		&& ((LEDs_expected_prev[3] !== last_LEDs_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDs[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDs_expected_prev);
		$display ("     Real value = %b", LEDs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LEDs_exp[3] = LEDs_expected_prev[3];
	end
	if (
		( LEDs_expected_prev[4] !== 1'bx ) && ( LEDs_prev[4] !== LEDs_expected_prev[4] )
		&& ((LEDs_expected_prev[4] !== last_LEDs_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDs[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDs_expected_prev);
		$display ("     Real value = %b", LEDs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LEDs_exp[4] = LEDs_expected_prev[4];
	end
	if (
		( LEDs_expected_prev[5] !== 1'bx ) && ( LEDs_prev[5] !== LEDs_expected_prev[5] )
		&& ((LEDs_expected_prev[5] !== last_LEDs_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDs[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDs_expected_prev);
		$display ("     Real value = %b", LEDs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LEDs_exp[5] = LEDs_expected_prev[5];
	end
	if (
		( LEDs_expected_prev[6] !== 1'bx ) && ( LEDs_prev[6] !== LEDs_expected_prev[6] )
		&& ((LEDs_expected_prev[6] !== last_LEDs_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDs[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDs_expected_prev);
		$display ("     Real value = %b", LEDs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LEDs_exp[6] = LEDs_expected_prev[6];
	end
	if (
		( LEDs_expected_prev[7] !== 1'bx ) && ( LEDs_prev[7] !== LEDs_expected_prev[7] )
		&& ((LEDs_expected_prev[7] !== last_LEDs_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDs[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDs_expected_prev);
		$display ("     Real value = %b", LEDs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LEDs_exp[7] = LEDs_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module LauflichtV2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg change_mode;
reg clk;
reg [7:0] muster;
reg muster_ubernahme;
reg reset;
reg start;
// wires                                               
wire [7:0] LEDs;
wire [7:0] U32;
wire [7:0] U33;

wire sampler;                             

// assign statements (if any)                          
LauflichtV2 i1 (
// port map - connection between master ports and signals/registers   
	.change_mode(change_mode),
	.clk(clk),
	.LEDs(LEDs),
	.muster(muster),
	.muster_ubernahme(muster_ubernahme),
	.reset(reset),
	.start(start),
	.U32(U32),
	.U33(U33)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// muster[ 7 ]
initial
begin
	muster[7] = 1'b1;
end 
// muster[ 6 ]
initial
begin
	muster[6] = 1'b0;
end 
// muster[ 5 ]
initial
begin
	muster[5] = 1'b0;
end 
// muster[ 4 ]
initial
begin
	muster[4] = 1'b0;
end 
// muster[ 3 ]
initial
begin
	muster[3] = 1'b1;
end 
// muster[ 2 ]
initial
begin
	muster[2] = 1'b0;
end 
// muster[ 1 ]
initial
begin
	muster[1] = 1'b1;
end 
// muster[ 0 ]
initial
begin
	muster[0] = 1'b0;
end 

// muster_ubernahme
initial
begin
	muster_ubernahme = 1'b1;
	muster_ubernahme = #330000 1'b0;
	muster_ubernahme = #20000 1'b1;
end 

LauflichtV2_vlg_sample_tst tb_sample (
	.change_mode(change_mode),
	.clk(clk),
	.muster(muster),
	.muster_ubernahme(muster_ubernahme),
	.reset(reset),
	.start(start),
	.sampler_tx(sampler)
);

LauflichtV2_vlg_check_tst tb_out(
	.LEDs(LEDs),
	.U32(U32),
	.U33(U33),
	.sampler_rx(sampler)
);
endmodule

