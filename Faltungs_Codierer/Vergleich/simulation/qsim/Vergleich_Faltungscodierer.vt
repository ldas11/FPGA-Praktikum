// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/15/2017 14:47:05"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Vergleich_Faltungscodierer
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Vergleich_Faltungscodierer_vlg_sample_tst(
	CLK,
	d,
	reset,
	sampler_tx
);
input  CLK;
input  d;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or d or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Vergleich_Faltungscodierer_vlg_check_tst (
	out_AHDL,
	out_Diagramm,
	out_Faltungscodierer,
	sampler_rx
);
input [1:0] out_AHDL;
input [1:0] out_Diagramm;
input [1:0] out_Faltungscodierer;
input sampler_rx;

reg [1:0] out_AHDL_expected;
reg [1:0] out_Diagramm_expected;
reg [1:0] out_Faltungscodierer_expected;

reg [1:0] out_AHDL_prev;
reg [1:0] out_Diagramm_prev;
reg [1:0] out_Faltungscodierer_prev;

reg [1:0] out_AHDL_expected_prev;
reg [1:0] out_Diagramm_expected_prev;
reg [1:0] out_Faltungscodierer_expected_prev;

reg [1:0] last_out_AHDL_exp;
reg [1:0] last_out_Diagramm_exp;
reg [1:0] last_out_Faltungscodierer_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	out_AHDL_prev = out_AHDL;
	out_Diagramm_prev = out_Diagramm;
	out_Faltungscodierer_prev = out_Faltungscodierer;
end

// update expected /o prevs

always @(trigger)
begin
	out_AHDL_expected_prev = out_AHDL_expected;
	out_Diagramm_expected_prev = out_Diagramm_expected;
	out_Faltungscodierer_expected_prev = out_Faltungscodierer_expected;
end


// expected out_AHDL[ 1 ]
initial
begin
	out_AHDL_expected[1] = 1'bX;
end 
// expected out_AHDL[ 0 ]
initial
begin
	out_AHDL_expected[0] = 1'bX;
end 
// expected out_Diagramm[ 1 ]
initial
begin
	out_Diagramm_expected[1] = 1'bX;
end 
// expected out_Diagramm[ 0 ]
initial
begin
	out_Diagramm_expected[0] = 1'bX;
end 
// expected out_Faltungscodierer[ 1 ]
initial
begin
	out_Faltungscodierer_expected[1] = 1'bX;
end 
// expected out_Faltungscodierer[ 0 ]
initial
begin
	out_Faltungscodierer_expected[0] = 1'bX;
end 
// generate trigger
always @(out_AHDL_expected or out_AHDL or out_Diagramm_expected or out_Diagramm or out_Faltungscodierer_expected or out_Faltungscodierer)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected out_AHDL = %b | expected out_Diagramm = %b | expected out_Faltungscodierer = %b | ",out_AHDL_expected_prev,out_Diagramm_expected_prev,out_Faltungscodierer_expected_prev);
	$display("| real out_AHDL = %b | real out_Diagramm = %b | real out_Faltungscodierer = %b | ",out_AHDL_prev,out_Diagramm_prev,out_Faltungscodierer_prev);
`endif
	if (
		( out_AHDL_expected_prev[0] !== 1'bx ) && ( out_AHDL_prev[0] !== out_AHDL_expected_prev[0] )
		&& ((out_AHDL_expected_prev[0] !== last_out_AHDL_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_AHDL[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_AHDL_expected_prev);
		$display ("     Real value = %b", out_AHDL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_AHDL_exp[0] = out_AHDL_expected_prev[0];
	end
	if (
		( out_AHDL_expected_prev[1] !== 1'bx ) && ( out_AHDL_prev[1] !== out_AHDL_expected_prev[1] )
		&& ((out_AHDL_expected_prev[1] !== last_out_AHDL_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_AHDL[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_AHDL_expected_prev);
		$display ("     Real value = %b", out_AHDL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_AHDL_exp[1] = out_AHDL_expected_prev[1];
	end
	if (
		( out_Diagramm_expected_prev[0] !== 1'bx ) && ( out_Diagramm_prev[0] !== out_Diagramm_expected_prev[0] )
		&& ((out_Diagramm_expected_prev[0] !== last_out_Diagramm_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_Diagramm[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_Diagramm_expected_prev);
		$display ("     Real value = %b", out_Diagramm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_Diagramm_exp[0] = out_Diagramm_expected_prev[0];
	end
	if (
		( out_Diagramm_expected_prev[1] !== 1'bx ) && ( out_Diagramm_prev[1] !== out_Diagramm_expected_prev[1] )
		&& ((out_Diagramm_expected_prev[1] !== last_out_Diagramm_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_Diagramm[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_Diagramm_expected_prev);
		$display ("     Real value = %b", out_Diagramm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_Diagramm_exp[1] = out_Diagramm_expected_prev[1];
	end
	if (
		( out_Faltungscodierer_expected_prev[0] !== 1'bx ) && ( out_Faltungscodierer_prev[0] !== out_Faltungscodierer_expected_prev[0] )
		&& ((out_Faltungscodierer_expected_prev[0] !== last_out_Faltungscodierer_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_Faltungscodierer[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_Faltungscodierer_expected_prev);
		$display ("     Real value = %b", out_Faltungscodierer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out_Faltungscodierer_exp[0] = out_Faltungscodierer_expected_prev[0];
	end
	if (
		( out_Faltungscodierer_expected_prev[1] !== 1'bx ) && ( out_Faltungscodierer_prev[1] !== out_Faltungscodierer_expected_prev[1] )
		&& ((out_Faltungscodierer_expected_prev[1] !== last_out_Faltungscodierer_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_Faltungscodierer[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_Faltungscodierer_expected_prev);
		$display ("     Real value = %b", out_Faltungscodierer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out_Faltungscodierer_exp[1] = out_Faltungscodierer_expected_prev[1];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Vergleich_Faltungscodierer_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg d;
reg reset;
// wires                                               
wire [1:0] out_AHDL;
wire [1:0] out_Diagramm;
wire [1:0] out_Faltungscodierer;

wire sampler;                             

// assign statements (if any)                          
Vergleich_Faltungscodierer i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.d(d),
	.out_AHDL(out_AHDL),
	.out_Diagramm(out_Diagramm),
	.out_Faltungscodierer(out_Faltungscodierer),
	.reset(reset)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

// d
initial
begin
	d = 1'b0;
	d = #10000 1'b1;
	d = #10000 1'b0;
	d = #10000 1'b1;
	d = #30000 1'b0;
	d = #20000 1'b1;
	d = #10000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #10000 1'b1;
	reset = #80000 1'b0;
end 

Vergleich_Faltungscodierer_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.d(d),
	.reset(reset),
	.sampler_tx(sampler)
);

Vergleich_Faltungscodierer_vlg_check_tst tb_out(
	.out_AHDL(out_AHDL),
	.out_Diagramm(out_Diagramm),
	.out_Faltungscodierer(out_Faltungscodierer),
	.sampler_rx(sampler)
);
endmodule

